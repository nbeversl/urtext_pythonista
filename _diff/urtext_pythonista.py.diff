{"1678602494": "@@ -2093,17 +2093,16 @@\n options \n- \n = %7B%0A%09%09%09'\n", "1678602279": "@@ -3999,16 +3999,21 @@\n ender):%0A\n+%09%09s%0A%0A\n %0A%09def in\n", "1678602573": "@@ -2918,16 +2918,20 @@\n (items=l\n+ist(\n self.men\n@@ -2939,32 +2939,33 @@\n _options.keys())\n+)\n %0A%09%09self.autoComp\n", "1678602567": "@@ -2859,17 +2859,16 @@\n nt(self.\n-.\n menu_opt\n@@ -2913,24 +2913,25 @@\n items(items=\n+l\n self.menu_op\n", "1678602314": "@@ -1512,16 +1512,17 @@\n self.tab\n+,\n %0A%09%09%09'::'\n@@ -4054,13 +4054,13 @@\n , '%5C\n+t\n ')%0A%0A\n-%0A\n %09def\n", "1678601432": "@@ -7085,73 +7085,8 @@\n t()%0A\n-%09%09if not isinstance(filenames, list):%0A%09%09%09filenames = %5Bfilenames%5D%0A\n %09%09se\n", "1678602499": "@@ -2838,32 +2838,43 @@\n (self, sender):%0A\n+%09%09print(s)%0A\n %09%09self.autoCompl\n", "1678602253": "@@ -1491,24 +1491,28 @@\n nline_node,%0A\n+%09%09%09%0A\n %09%09%09'::': sel\n@@ -2879,15 +2879,19 @@\n lf.m\n-ai_menu\n+enu_options\n .key\n", "1678602264": "@@ -1509,16 +1509,19 @@\n ': self.\n+tab\n %0A%09%09%09'::'\n@@ -3974,16 +3974,19 @@\n future)%0A\n+%09%09%09\n %0A%09def in\n", "1678602532": "@@ -2859,20 +2859,16 @@\n nt(self.\n-self\n .menu_op\n", "1678602504": "@@ -2855,16 +2855,44 @@\n %09print(s\n+elf.self.menu_options.keys()\n )%0A%09%09self\n", "1678601395": "@@ -7085,26 +7085,8 @@\n t()%0A\n-%09%09print(filename)%0A\n %09%09if\n", "1678601389": "@@ -7079,25 +7079,39 @@\n .result()%0A%09%09\n-%09\n+print(filename)\n %0A%09%09if not is\n", "1678602258": "@@ -1498,16 +1498,27 @@\n ode,%0A%09%09%09\n+'-%3E': self.\n %0A%09%09%09'::'\n", "1678602671": "@@ -3029,24 +3029,27 @@\n %09%09self.m\n-ain_menu\n+enu_options\n %5Bfunctio\n@@ -3053,16 +3053,17 @@\n tion%5D()%0A\n+%0A\n %09def ins\n", "1678602269": "@@ -3970,27 +3970,49 @@\n ied(future)%0A\n-%09%09%09\n+%0A%09def tab(self, sender):%0A\n %0A%09def insert\n", "1678602284": "@@ -4002,16 +4002,43 @@\n er):%0A%09%09s\n+elf.tv.replace_range(self.)\n %0A%0A%0A%09def \n", "1678602290": "@@ -4028,16 +4028,38 @@\n ge(self.\n+tv.selected_range, '%5C'\n )%0A%0A%0A%09def\n", "1678602638": "@@ -2101,61 +2101,8 @@\n = %7B%0A\n-%09%09%09'Initialize New Project' : self.init_new_project,%0A\n %09%09%09'\n", "1678602798": "@@ -2797,42 +2797,8 @@\n r):%0A\n-%09%09print(self.menu_options.keys())%0A\n %09%09se\n@@ -3017,16 +3017,20 @@\n nction%5D(\n+None\n )%0A%0A%09def \n@@ -14438,18 +14438,18 @@\n set_acti\n-n\n o\n+n\n (self.in\n@@ -14539,52 +14539,8 @@\n e):%0A\n-%09%09# could be refactored into Urtext library%0A\n %09%09li\n", "1678602666": "@@ -3050,17 +3050,16 @@\n tion%5D()%0A\n-%0A\n %09def ins\n", "1678602184": "@@ -2869,25 +2869,24 @@\n ems=self.mai\n-n\n _menu.keys()\n", "1678601384": "from urtext.project_list import ProjectList\nfrom urtext.project import match_compact_node\nfrom sublemon.editor import BaseEditor\nimport os\nimport time\nimport ui\nimport dialogs\nimport re\nimport console\nimport webbrowser\nimport concurrent.futures\nfrom objc_util import *\nimport clipboard\nfrom urtext_theme_light import urtext_theme_light # default theme\nfrom urtext_syntax import UrtextSyntax\n\nclass UrtextEditor(BaseEditor):\n\n\tname = \"Pythonista Urtext\"\n\n\tdef __init__(self, args):\n\t\tsuper().__init__({})\n\n\t\tself.theme = urtext_theme_light # default\n\n\t\tself.urtext_project_path = ''\n\t\tif 'path' in args:\n\t\t\tself.urtext_project_path = args['path']\n\n\t\tif 'theme' in args:\n\t\t\tself.theme = args['theme']\n\n\t\tself.initial_project = None\n\t\tif 'initial_project' in args:\n\t\t\tself.initial_project = args['initial_project']\n\n\t\tself._UrtextProjectList = ProjectList(self.urtext_project_path)\n\t\tself._UrtextProjectList.set_current_project(self.urtext_project_path)\n\n\t\tself.current_open_file = None\n\t\tself.current_open_file_hash = None\n\t\tself.saved = None\n\t\tself.buttons = {}\n\t\tself.executor = concurrent.futures.ThreadPoolExecutor(max_workers=10)\n\t\tself.updating_history = False\n\t\tself.open_home_button_pressed = False\n\t\tself.setup_syntax_highlighter(UrtextSyntax, self.theme)\n\t\tself.setup_buttons({\n\t\t\t'/' : self.open_link,\n\t\t\t'?' : self.search_node_title,\n\t\t\t'<' : self.nav_back,\n\t\t\t'>' : self.nav_forward,\n\t\t\t'h' : self.open_home,\n\t\t\t';' : self.new_node,\n\t\t\t'S' : self.manual_save,\n\t\t\t'{' : self.new_inline_node,\n\t\t\t'::': self.meta_autocomplete,\n\t\t\t'M' : self.main_menu,\n\t\t\t'D' : self.tag_from_other,\n\t\t\t't' : self.timestamp,\n\t\t\t'<..>' : self.manual_timestamp,\n\t\t\t'\u2022' : self.compact_node,\n\t\t\t'o' : self.select_project,\n\t\t\t'[' : self.insert_dynamic_def,\n\t\t\t'`' : self.insert_backtick,\n\t\t\t'*' : self.search_all_projects,\n\t\t\t'c' : self.copy_link_to_current_node,\n\t\t\t'^c': self.copy_link_to_current_node_with_project,\n\t\t\t'\u2193' : self.hide_keyboard,\n\t\t\t'k' : self.search_keywords,\n\t\t\t'^' : self.free_associate,\n\t\t\t'| >': self.link_to_new_node\n\t\t\t})\n\n\t\tself.setup_autocomplete()\n\n\t\tself.menu_options  = {\n\t\t\t'Initialize New Project' : self.init_new_project,\n\t\t\t'Move file to another project' : self.move_file,\n\t\t\t'Reload Projects' : self.reload_projects,\n\t\t\t'Delete Node' : self.delete_node,\n\t\t\t'Link >' : self.link_to_node,\n\t\t\t'Point >>' : self.point_to_node,\n\t\t\t'Pop Node' : self.pop_node\n\t\t   }\n\n\t\tlaunch_actions = {\n\t\t\t'new_node' : self.new_node\n\t\t}\n\n\t\tif 'launch_action' in args and args['launch_action'] in launch_actions:\n\t\t\tlaunch_actions[args['launch_action']](None)\n\n\tdef hide_keyboard(self, sender):\n\t\tself.tv.end_editing()\n\n\tdef search_all_projects(self, sender):\n\t\tself.autoCompleter.set_items(items=self._UrtextProjectList.titles())\n\t\tself.autoCompleter.set_action(self.open_node)\n\t\tself.autoCompleter.show()\n\n\tdef main_menu(self, sender):\n\t\tself.autoCompleter.set_items(items=self.main_menu.keys())\n\t\tself.autoCompleter.set_action(self.run_chosen_option)\n\t\tself.autoCompleter.show()\n\n\tdef run_chosen_option(self, function):\n\t\tself.main_menu[function]()\n\n\tdef insert_dynamic_def(self,sender):\n\t\t# broken right now\n\t\tnode_id = self.new_inline_node(None, locate_inside=False)\n\t\tposition = self.tv.selected_range[0]\n\t\tself.tv.replace_range(self.tv.selected_range, '\\n\\n[[ ID(>' + node_id + ')\\n+( ) +( )\\n-( ) -( )\\n ]]')\n\t\tself.tv.selected_range = (position + 12, position + 12)\n\n\tdef insert_backtick(self, sender):\n\t\tself.tv.replace_range(self.tv.selected_range, '`')\n\t\n\tdef pop_node(self, sender):\n\t\tfilename = self.current_open_file\t\t\n\t\tfile_pos = self.tv.selected_range[0] \n\t\tline, col_pos = get_full_line(file_pos, self.tv)\n\t\tself.save(None)\n\t\tfuture = self._UrtextProjectList.current_project.run_action('POP_NODE',\n\t\t\tline,\n\t\t\tfilename,\n\t\t\tfile_pos = file_pos,\n\t\t\tcol_pos = col_pos)\n\n\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\tself.executor.submit(self.refresh_open_file_if_modified, future)\n\t\telse:\n\t\t\tself.refresh_open_file_if_modified(future)\n\n\tdef insert_id(self, sender):\n\t\tnew_id = self._UrtextProjectList.current_project.next_index()\n\t\tself.tv.replace_range(self.tv.selected_range, '@'+new_id)\n\n\tdef move_file(self, sender):\n\n\t\tself.project_list.items = self._UrtextProjectList.project_titles()\n\t\tself.project_list.action = self.execute_move_file\n\t\tself.project_selector.height = 35*len(self.project_list.items)\n\t\tself.project_selector.hidden = False\n\t\tself.project_selector.bring_to_front()\n\t\t\n\tdef manual_timestamp(self, sender):\n\t\tposition = self.tv.selected_range[0]\n\t\tself.tv.replace_range(\n\t\t\tself.tv.selected_range, \n\t\t\t'<>')\n\t\tself.tv.selected_range = (position+1,position+1)\n\n\tdef execute_move_file(self, sender):\n\t\tself.project_selector.hidden = True    \n\t\tselection = sender.selected_row\n\t\tselected_project = self.project_list.items[selection]\n\t\tif self._UrtextProjectList.move_file(self.current_open_file, selected_project):\n\t\t\tself.current_open_file = None\n\t\t\tself.nav_back(None)\n\t\t\tconsole.hud_alert('File Moved' ,'success',2)\n\t\telse:\n\t\t\tconsole.hud_alert('Error happened. Check the Urtext console' ,'error',2)\n\n\tdef reload_projects(self, sender):\n\t\tself.close()\n\t\tself._UrtextProjectList = ProjectList(self.urtext_project_path)\n\t\tself.present('fullscreen', hide_title_bar=True)\n\t\tself.open_home(None)\n\t\t\n\t\tconsole.hud_alert('Project List Reloaded' ,'success',1)\n\n\tdef init_new_project(self, sender):\n\t\tself.textfield.hidden=True \n\t\tnew_project_path = sender.text\n\t\tpath = os.path.join(self._UrtextProjectList.base_path, new_project_path)\n\t\tself._UrtextProjectList.init_new_project(path)\n\n\tdef select_project(self, sender): \n\t\tproject_list = ui.ListDataSource(items=self._UrtextProjectList.project_titles()) \n\t\tproject_list.action = self.switch_project\t\t\n\t\tself.autoCompleter.set_items(self._UrtextProjectList.projects)\n\t\tself.autoCompleter.set_action(self.switch_project)\n\t\tself.autoCompleter.show()\t\n\n\tdef switch_project(self, sender):\n\t\tselection = sender.selected_row\n\t\tself.tv.begin_editing()\n\t\tself._UrtextProjectList.set_current_project(self.project_list.items[selection])\n\t\tself.dropDown.hidden = True\n\t\tnode_to_open = self._UrtextProjectList.nav_current()\n\t\tif node_to_open:\n\t\t\treturn self.open_node(node_to_open)\n\t\tconsole.hud_alert('Project switched, but no navigation position available' ,'success',3)\n\n\tdef manual_save(self, sender):\n\t\tself.save(None)\n\t\tconsole.hud_alert('Saved','success',0.5)\n\n\tdef save(self, sender):\n\t\tif self.saved:\n\t\t\treturn\n\t\tif self.current_open_file:\n\t\t\tcontents = self.tv.text \n\t\t\twith open(os.path.join(self._UrtextProjectList.current_project.entry_path, self.current_open_file),'w', encoding='utf-8') as d:\n\t\t\t\td.write(contents)\n\t\t\tself.current_open_file_hash = hash(contents)\n\t\t\tfuture = self._UrtextProjectList.current_project.on_modified(self.current_open_file)\n\t\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\t\tself.executor.submit(self.refresh_open_file_if_modified, future)\n\t\t\telse:\n\t\t\t\tself.refresh_open_file_if_modified(future)\n\t\t\tself.saved = True\n\t\n\tdef refresh_open_file_if_modified(self, filenames):\n\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\tfilenames = filenames.result()\n\t\t\t\n\t\tif not isinstance(filenames, list):\n\t\t\tfilenames = [filenames]\n\t\tself.saved = False\n\t\tif self.current_open_file in filenames:\n\t\t\twith open(os.path.join(self._UrtextProjectList.current_project.entry_path, self.current_open_file), encoding=\"utf-8\") as file:\n\t\t\t\tcontents=file.read()\n\t\t\tif hash(contents) == self.current_open_file_hash:\n\t\t\t\treturn False\n\t\t\tself.open_file(self.current_open_file, save_first=False)\n\t\t\tself.refresh_syntax_highlighting()\n\t\t\t\n\tdef refresh_syntax_highlighting(self):\n\t\tposition = self.tv.selected_range\n\t\tself.tv.scroll_enabled= False     \n\t\tself.syntax_highlighter.setAttribs(self.tv, self.tvo)\n\t\tself.tv.scroll_enabled= True\n\t\ttry:\n\t\t\tself.tv.selected_range = position\n\t\texcept ValueError:\n\t\t\tpass\n\t\t\n\tdef open_file(self, filename, save_first=True):\n\t\t\"\"\"\n\t\tReceives a basename.\n\t\tPath used is always the path of the current project\n\t\t\"\"\"\n\t\tf = os.path.join(self._UrtextProjectList.current_project.entry_path, filename)\n\t\tif not os.path.exists(f):\n\t\t\tconsole.hud_alert('FILE not found. Synced?','error',1)\n\t\t\treturn None\n\t\t\n\t\tif save_first and self.current_open_file != filename:\n\t\t\tself.save(None)\n\n\t\tchanged_files = self._UrtextProjectList.visit_file(f)\n\t\twith open(f,'r', encoding='utf-8') as d:\n\t\t\tcontents=d.read()\n\t\tself.tv.text=contents\n\t\tself.current_open_file = filename\n\t\tself.current_open_file_hash = hash(contents)\n\t\tself.refresh_syntax_highlighting()\n\t\treturn changed_files\n\n\tdef timestamp(self, sender):\n\t\tself.tv.replace_range(\n\t\t\tself.tv.selected_range, \n\t\t\tself._UrtextProjectList.current_project.timestamp(as_string=True))\n\n\tdef open_link(self, sender):\n\t\t\n\t\tfilename = self.current_open_file\t\t\n\t\tfile_pos = self.tv.selected_range[0] \n\t\tline, col_pos = get_full_line(file_pos, self.tv)\n\t\tlink = self._UrtextProjectList.get_link_and_set_project(\n\t\t\tline,\n\t\t\tfilename, \n\t\t\tcol_pos=col_pos,\n\t\t\tfile_pos=file_pos)\n\n\t\tif link == None:\n\t\t\tif self._UrtextProjectList.current_project.compiled:\n\t\t\t\tconsole.hud_alert('Link not in the project.','error',1)\n\t\t\telse:\n\t\t\t\tconsole.hud_alert('Project is still compiling.','error',1)\n\t\t\treturn None\n\n\t\tif link['kind'] == 'EDITOR_LINK':\n\t\t\treturn self.open_file(link['link'])\n\t\t\t\n\t\tif link['kind'] == 'NODE':\n\t\t\treturn self.open_node(link['link'], position=link['dest_position'])\n\t\t\t\t\t\t\n\t\tif link['kind'] == 'HTTP':  \n\t\t\treturn webbrowser.open('safari-'+link['link'])\n\t\t\t\n\t\tif link['kind'] == 'FILE':\n\t\t\tif not os.path.exists(os.path.join(self._UrtextProjectList.current_project.entry_path, link['link'])):\n\t\t\t\tconsole.hud_alert(link['link'] + ' not found.', 'error',1)\n\t\t\t\treturn\n\t\t\t# This is the best we can do right now in iOS\n\t\t\tconsole.open_in(os.path.join(self._UrtextProjectList.current_project.entry_path, link['link']))\n\n\tdef copy_link_to_current_node(self, sender, include_project=False):\n\t\tif not self.current_open_file:\n\t\t\treturn None\n\t\tfile_position = self.tv.selected_range[0] \n\t\tnode_id = self._UrtextProjectList.current_project.get_node_id_from_position(\n\t\t\t\tself.current_open_file, \n\t\t\t\tfile_position)\n\t\tlink = self._UrtextProjectList.build_contextual_link(\n\t\t\tnode_id,\n\t\t\tinclude_project=include_project)\n\t\tif link:\n\t\t\tclipboard.set(link)\n\t\t\tconsole.hud_alert(link+ ' copied to the clipboard.','success',2)\n\t\telse:\n\t\t\tconsole.hud_alert('No link found here. Trying saving the file first.','error',2)\n\n\t\n\tdef copy_link_to_current_node_with_project(self, sender):\n\t\treturn self.copy_link_to_current_node(None, include_project=True)\n\n\tdef open_home(self, sender):\n\t\tif not self.open_home_button_pressed:\n\t\t\tself.open_home_button_pressed = True\n\t\t\thome_id = self._UrtextProjectList.current_project.get_home()\n\t\t\tif home_id:\n\t\t\t\tself.open_node(home_id)\n\t\t\t\tself.open_home_button_pressed = False\n\t\t\telse:\n\t\t\t\tif self._UrtextProjectList.current_project.compiled:\n\t\t\t\t\tconsole.hud_alert('No home node for this project','error',0.5)\n\t\t\t\t\tself.open_home_button_pressed = False\n\t\t\t\telse:\n\t\t\t\t\tconsole.hud_alert('Home node will open when found','error',0.5)\t\t\t\t\n\t\t\t\t\tself.executor.submit(self.open_home_when_found, None)\n\n\tdef open_home_when_found(self, sender):\n\t\twhile not self._UrtextProjectList.current_project.get_home():\n\t\t\tif not self._UrtextProjectList.current_project.compiled:\n\t\t\t\ttime.sleep(.5)\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tconsole.hud_alert('Project compiled. No home node for this project','error',0.5)\n\t\tself.open_home_button_pressed = False\n\t\tif not self.current_open_file: # only if another file has not been opened\n\t\t\tself.open_home(None)\n\t\t\n\n\tdef new_inline_node(self, sender, locate_inside=True):\n\t\tselection = self.tv.selected_range\n\t\tself.tv.replace_range(selection, '{   }')\n\t\tself.tv.selected_range = (selection[0]+1, selection[0]+1)\n\n\tdef open_node(self, \n\t\t\tnode_id,\n\t\t\tposition=None,\n\t\t\tadd_to_nav=True # so method can be called without affecting nav\n\t\t\t):\n\n\t\tif node_id not in self._UrtextProjectList.current_project.nodes:\n\t\t\tif  self._UrtextProjectList.current_project.compiled:\n\t\t\t\treturn console.hud_alert(node_id+' not in current project' ,'error',1)\n\t\t\telse:\n\t\t\t\treturn console.hud_alert('Project is still compiling' ,'error',1)\n\n\t\tif position ==  None:\n\t\t\tposition = self._UrtextProjectList.current_project.nodes[node_id].ranges[0][0]\n\t\telse:\n\t\t\tposition = int(position)\n\n\t\tfilename = self._UrtextProjectList.current_project.nodes[node_id].filename\n\n\t\tif add_to_nav:\n\t\t\tself._UrtextProjectList.nav_new(node_id)\n\n\t\tif filename == self.current_open_file:\n\t\t\tself.tv.selected_range = (position, position)\n\t\t\tself.tvo.scrollRangeToVisible(NSRange(position, 1)) \n\t\t\treturn\n\n\t\tchanged_files = self.open_file(filename)\n\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\tself.executor.submit(self.refresh_open_file_if_modified, changed_files)\n\t\telse:\n\t\t\tself.refresh_open_file_if_modified(changed_files)\n\t\tself.refresh_syntax_highlighting()\n\t\t\n\t\tself.tv.selected_range = (position, position)\n\t\tself.tvo.scrollRangeToVisible(NSRange(position, 1)) \n\t\t\n\tdef new_node(self, sender):        \n\t\tnew_node = self._UrtextProjectList.current_project.new_file_node(path=self._UrtextProjectList.current_project.entry_path)\n\t\t\n\t\tself.open_file(new_node['filename'])\n\t\tself.tv.selected_range = (len(self.tv.text)-1,len(self.tv.text)-1)\n\t\tself.tv.begin_editing()\n\n\tdef tag_from_other(self, sender):\n\t\tposition = self.tv.selected_range[0]\n\t\tline = self.tv.text[position:position+250]\n\t\tlink = self._UrtextProjectList.current_project.get_link(line)\n\t\tif link and link['kind'] == 'NODE':\n\t\t\tfuture = self._UrtextProjectList.current_project.tag_other_node(link['link'], 'tags::done;')\n\t\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\t\tself.executor.submit(self.refresh_open_file_if_modified, future)\n\t\t\telse:\n\t\t\t\tself.refresh_open_file_if_modified(future)\n\t\t\tconsole.hud_alert('Tagged Done','success',0.5)\n\n\tdef meta_autocomplete(self, sender): #works\t\n\t\tself.autoCompleter.set_items(self._UrtextProjectList.get_all_meta_pairs())\n\t\tself.autoCompleter.set_action(self.insert_meta)\n\t\tself.autoCompleter.show()\t\n\n\tdef search_node_title(self, sender):\n\t\tself.autoCompleter.set_items(self._UrtextProjectList.current_project.all_nodes())\n\t\tself.autoCompleter.set_action(self.open_node)\n\t\tself.autoCompleter.show()\n\n\tdef insert_meta(self, text):\n\t\tself.tv.replace_range(\n\t\t\tself.tv.selected_range, \n\t\t\ttext + '; ')\n\n\tdef link_to_node(self, sender):\n\t\tself.autoCompleter.set_items(self._UrtextProjectList.current_project.all_nodes())\n\t\tself.autoCompleter.set_actino(self.insert_link_to_node)\n\t\tself.autoCompleter.show()\n\n\tdef insert_link_to_node(self, title):\n\t\t# could be refactored into Urtext library\n\t\tlink = self._UrtextProjectList.build_contextual_link(title)\n\t\tself.tv.replace_range(self.tv.selected_range, link)\n\n\tdef link_to_new_node(self, title):\n\t\tpath = self._UrtextProjectList.current_project.entry_path\n\t\tnew_node = self._UrtextProjectList.current_project.new_file_node()\n\t\tself.tv.replace_range(self.tv.selected_range, '| '+ new_node['id'] + '>' )\n\n\tdef point_to_node(self, title):\n\t\tself.autoCompleter.set_items(self._UrtextProjectList.current_project.all_nodes())\n\t\tself.autoCompleter.set_action(self.insert_pointer_to_node)\n\t\tself.autoCompleter.show()\n\n\tdef insert_pointer_to_node(self, sender):\n\t\tlink = self._UrtextProjectList.build_contextual_link(\n\t\t\ttitle,\n\t\t\tpointer=True) \n\t\tself.tv.replace_range(self.tv.selected_range, link)\n\n\tdef nav_back(self, sender):\n\t\tlast_node = self._UrtextProjectList.nav_reverse()\n\t\tif last_node:\n\t\t\tself.open_node(last_node, add_to_nav=False)\n\n\tdef nav_forward(self, sender):\n\t\tnext_node = self._UrtextProjectList.nav_advance()\n\t\tif next_node:\n\t\t\tself.open_node(next_node, add_to_nav=False)\n\n\t@ui.in_background\n\tdef delete_node(self, sender):\n\t\tif console.alert(\n\t\t\t'Delete'\n\t\t\t'',\n\t\t\t'Delete this file node?',\n\t\t\t'Yes'\n\t\t\t) == 1 :\n\t\t\tfuture = self._UrtextProjectList.current_project.delete_file(self.current_open_file)\n\t\t\tconsole.hud_alert('Deleted','success',0.5)\n\t\t\tself.current_open_file = None\n\t\t\tself.nav_back(None)\n\t\t\tif self._UrtextProjectList.current_project.is_async:\n\t\t\t\tself.executor.submit(self.refresh_open_file_if_modified, future)\n\t\t\telse:\n\t\t\t\tself.refresh_open_file_if_modified(future)\n\t\t\t\n\tdef compact_node(self, sender):\n\t\tselection = self.tv.selected_range\n\t\tcontents = self.tv.text[selection[0]:selection[1]]\n\t\tend_of_line = self.find_end_of_line(selection[1])\n\t\tline, col_pos = get_full_line(selection[1], self.tv)\n\n\t\tif match_compact_node(line):\n\t\t\treplace = False\n\t\t\tcontents = self._UrtextProjectList.current_project.add_compact_node()\n\t\telse:\n\t\t\t# If it is not a compact node, make it one and add an ID\n\t\t\treplace = True\n\t\t\tcontents = self._UrtextProjectList.current_project.add_compact_node(contents=line)\n\n\t\tif replace:\n\t\t\tself.tv.replace_range( (end_of_line-len(line),end_of_line) ,contents)\n\t\telse:\n\t\t\tself.tv.replace_range((end_of_line,end_of_line), '\\n' + contents + '\\n')\n\t\t\tself.tv.selected_range = (end_of_line + 3, end_of_line + 3)\n\n\tdef find_end_of_line(self, position):\n\t\tcontents = self.tv.text\n\t\twhile contents[position] != '\\n':\n\t\t\tposition += 1\n\t\t\tif position == len(contents):\n\t\t\t\tbreak\n\t\treturn position\n\n\tdef search_keywords(self, sender):\n\t\tself.autoCompleter.set_items(\n\t\t\tself._UrtextProjectList.current_project.extensions['RAKE_KEYWORDS'].get_keywords())\n\t\tself.autoCompleter.set_action(self.select_nodes_from_keywords)     \t\t\n\t\tself.autoCompleter.show()\n\n\tdef select_nodes_from_keywords(self, selected_keyword):\n\t\tselections = self._UrtextProjectList.current_project.extensions['RAKE_KEYWORDS'].get_by_keyword(selected_keyword)\t\t\n\t\tif len(selections) == 1:\n\t\t\tself.tv.begin_editing()\n\t\t\treturn self.open_node(selections[0])\n\t\telse:\n\t\t\tself.autoCompleter.hide()\n\t\t\tself.autoCompleter.set_items(selections)\n\t\t\tself.autoCompleter.set_action(self.open_node)\n\t\t\tself.autoCompleter.show()\n\n\tdef free_associate(self, sender):\n\t\tfull_line, col_pos = get_full_line(self.tv.selected_range[0], self.tv)\n\t\tself.title_autocompleter.action = self.title_autocompleter.open_node\n\t\ttitles = {}\n\n\t\tfor t in self._UrtextProjectList.current_project.extensions['RAKE_KEYWORDS'].get_assoc_nodes( \n\t\t\tfull_line,\n\t\t\tself.current_open_file,\n\t\t\tself.tv.selected_range[0],\n\t\t\t):\n\t\t\ttitles[self._UrtextProjectList.current_project.nodes[t].title] = (self._UrtextProjectList.current_project.title, t)\n\t\tself.title_autocompleter.titles = titles\n\t\tself.show_search_and_dropdown()\n\ndef get_full_line(position, tv):\n\tlines = tv.text.split('\\n')\n\ttotal_length = 0\n\tfor line in lines:\n\t\ttotal_length += len(line) + 1\n\t\tif total_length >= position:\n\t\t\tdistance_from_end_of_line = total_length - position\n\t\t\tposition_in_line = len(line) - distance_from_end_of_line\n\t\t\treturn (line, position_in_line)\n\t\t\n"}